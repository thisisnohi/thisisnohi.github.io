import{_ as t,M as p,p as e,q as o,R as n,t as s,N as c,a1 as l}from"./framework-449724a9.js";const i={},u=n("h1",{id:"jdk9-17",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jdk9-17","aria-hidden":"true"},"#"),s(" JDK9-17")],-1),r=n("blockquote",null,[n("p",null,"create by nohi 20230117")],-1),k=n("p",null,"简要记录JDK变化",-1),d=n("h2",{id:"jdk9",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jdk9","aria-hidden":"true"},"#"),s(" JDK9")],-1),v={href:"https://www.cnblogs.com/lujiango/p/7852120.html",target:"_blank",rel:"noopener noreferrer"},m=l(`<h3 id="_1-模块化" tabindex="-1"><a class="header-anchor" href="#_1-模块化" aria-hidden="true">#</a> 1 模块化</h3><ul><li><p>目标</p><p>（1）可靠的配置</p><p>（2）强封装</p><p>（3）模块化JDK/JRE</p></li><li><p>内容</p><ul><li><p>requires其他模块（或依赖于）的列表</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>requires语句用于指定一个模块对另一个模块的依赖，requires语法如下：
requires [transitive] [static] &lt;module&gt;;
&lt;module&gt;：是当前模块读取的另一个模块的名称；
static：则&lt;module&gt;模块在编译时是必需的，但在运行时是可选的；
transitive：级联依赖；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>exports包列表（其public API），其他模块可以使用</p></li><li><p>open的包（整个API，共有和私有），其他模块可以反射调用</p></li><li><p>使用的服务列表</p></li><li><p>提供的服务的实现列表</p></li></ul></li><li><p>聚合模块</p><p>可以创建一个不包含任何代码的模块，它收集并重新导出其他模块的内容，这样的模块称为聚合模块。假设有一个模块依赖于五个模块，可以为这五个模块创建一个聚合模块，现在你的模块只要依赖于一个模块--聚合模块。</p></li><li><p>声明模块</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span><span class="token keyword">open</span><span class="token punctuation">]</span> <span class="token keyword">module</span> <span class="token generics"><span class="token punctuation">&lt;</span>moduleName<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
　　<span class="token operator">&lt;</span><span class="token keyword">module</span><span class="token operator">-</span>statement<span class="token operator">&gt;</span><span class="token punctuation">;</span>
　　<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>open修饰符是可选的，它声明一个开放的模块，一个开放的模块导出所有的包，以便其他模块使用反射访问。<code>&lt;moduleName&gt;</code>是要定义的模块的名称，<code>&lt;module-statement&gt;</code>是一个模块语句。模块声明中可以包含零个或多个模块语句：</p><ul><li><p>导出语句（exports），导出模块，其他模块访问。</p><p><code>exports &lt;package&gt; to &lt;module1&gt;, &lt;module2&gt;;</code></p></li><li><p>开放语句（opens），开放当前模块，其他模块可以访问，包括反射调用等。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>opens &lt;package&gt;;
opens &lt;package&gt; to &lt;module1&gt;, &lt;module2&gt;……
&lt;package&gt;仅用于深层反射到&lt;module1&gt;，&lt;module2&gt;等。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>需要语句（requires），声明模块对另一个模块的依赖关系。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>requires &lt;module&gt;;
requires transitive &lt;module&gt;;
requires static &lt;module&gt;;
requires transitive static &lt;module&gt;;

static标示在编译时的依赖是强制的，但在运行时是可选的：requires static N意味着模块M需要模块N，模块N必须在编译时出现才能编译模块M，而在运行时存在模块N是可选的。
transitive当前模块依赖其他模块具有隐式依赖性，假设有三个模块P,Q和R，假设模块Q包含requires transitive R语句，如果模块P包含requires Q，这意味着模块P隐含依赖模块R。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用语句（uses），表达服务消费。</p><p>use语句可以指定服务接口的名字，当前模块就会发现它，使用java.util.ServiceLoader类进行加载：</p><p>uses <code>&lt;service-interface&gt;</code></p></li><li><p>提供语句（provides），表达服务提供。</p></li></ul></li><li><p>模拟约束</p><p>（1）将包拆分成多个模块是不允许的，也就是说，同一个包不能在多个模块中定义；</p><p>（2）不能同时访问多个模块中的相同软件包；</p><p>（3）模块图不能包含循环依赖，也就是说两个模块不能彼此读取，如果需要，他们应该是一个模块，而不是两个；</p><p>（4）模块声明不支持模块版本，需要使用jar工具或其他一些工具（javac）将模块的版本添加为类文件属性；</p><p>（4）模块系统没有子模块的概念，com.jdk9.address和com.jdk9.address.child是两个单独的模块。</p></li></ul><p>目测模块化，exports目录不能包含下级目录。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token namespace">jdk9<span class="token punctuation">.</span>module1</span> <span class="token punctuation">{</span>
    <span class="token keyword">exports</span> <span class="token namespace">nohi<span class="token punctuation">.</span>jdk9<span class="token punctuation">.</span>module1<span class="token punctuation">.</span>user</span><span class="token punctuation">;</span>
    <span class="token keyword">exports</span> <span class="token namespace">nohi<span class="token punctuation">.</span>jdk9<span class="token punctuation">.</span>module1<span class="token punctuation">.</span>user<span class="token punctuation">.</span>addres</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-jshell" tabindex="-1"><a class="header-anchor" href="#_2-jshell" aria-hidden="true">#</a> 2 jshell</h3><blockquote><p>命令行窗口，快速的运行一些简单的代码</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>╰─➤  jshell        <span class="token comment"># 调用jshell命令窗口</span>
<span class="token operator">|</span>  欢迎使用 JShell -- 版本 <span class="token number">18.0</span>.2
<span class="token operator">|</span>  要大致了解该版本, 请键入: /help intro

jshell<span class="token operator">&gt;</span> System.out.println<span class="token punctuation">(</span><span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
HelloWorld

jshell<span class="token operator">&gt;</span> /exit       <span class="token comment"># 退出</span>
<span class="token operator">|</span>  再见
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-接口私有方法" tabindex="-1"><a class="header-anchor" href="#_3-接口私有方法" aria-hidden="true">#</a> 3 接口私有方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>
    <span class="token comment">//定义私有方法</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//default中调用</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-改进的try-with-resource" tabindex="-1"><a class="header-anchor" href="#_4-改进的try-with-resource" aria-hidden="true">#</a> 4 改进的try with resource</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryWithResouce</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTryWithResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> src<span class="token punctuation">,</span> <span class="token class-name">String</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>fis<span class="token punctuation">;</span> fos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> length<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 测试类</span>
<span class="token annotation punctuation">@org.junit.jupiter.api.Test</span>
<span class="token keyword">void</span> <span class="token function">testTryWithResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">{</span>
	<span class="token class-name">TryWithResouce</span> tr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TryWithResouce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> src <span class="token operator">=</span> <span class="token string">&quot;./pom.xml&quot;</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> target <span class="token operator">=</span>  <span class="token string">&quot;./pom_target.xml&quot;</span><span class="token punctuation">;</span>
	tr<span class="token punctuation">.</span><span class="token function">testTryWithResource</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-不能使用下划线命名变量" tabindex="-1"><a class="header-anchor" href="#_5-不能使用下划线命名变量" aria-hidden="true">#</a> 5 不能使用下划线命名变量</h3><h3 id="_6-string字符串的变化-string内部的char数组改成了byte数组" tabindex="-1"><a class="header-anchor" href="#_6-string字符串的变化-string内部的char数组改成了byte数组" aria-hidden="true">#</a> 6 String字符串的变化，String内部的char数组改成了byte数组</h3><h2 id="jdk10" tabindex="-1"><a class="header-anchor" href="#jdk10" aria-hidden="true">#</a> JDK10</h2><h3 id="_1-局部变量类型推断" tabindex="-1"><a class="header-anchor" href="#_1-局部变量类型推断" aria-hidden="true">#</a> 1.局部变量类型推断</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;ABC&quot;</span><span class="token punctuation">;</span> <span class="token comment">//根据推断为 字符串类型</span>
<span class="token keyword">var</span> l <span class="token operator">=</span> <span class="token number">10L</span><span class="token punctuation">;</span><span class="token comment">//根据10L 推断long 类型</span>
<span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//根据 true推断 boolean 类型</span>
<span class="token keyword">var</span> flag1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//这里会推断boolean类型。0表示false 非0表示true</span>
<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 推断 ArrayList&lt;String&gt;</span>
<span class="token keyword">var</span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 推断 Stream&lt;String&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><ul><li>将JDK多存储库合并为单存储库</li><li>垃圾回收接口</li><li>并行Full GC 的G1</li><li>应用数据共享</li><li>线程局部管控</li><li>移除Native-Header Generation Tool （javah）</li><li>Unicode 标签扩展</li><li>备用内存设备上分配堆内存</li><li>基于实验JAVA 的JIT 编译器</li><li>Root 证书</li><li>基于时间的版本控制</li></ul><h2 id="jdk11" tabindex="-1"><a class="header-anchor" href="#jdk11" aria-hidden="true">#</a> JDK11</h2><blockquote><p>2018年9 月 26 日</p><p>ZGC、Http Client</p><p>参考：https://www.jianshu.com/p/84a6050c5391</p></blockquote><h3 id="_1-直接运行" tabindex="-1"><a class="header-anchor" href="#_1-直接运行" aria-hidden="true">#</a> 1 直接运行</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java Hello.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-string新增方法" tabindex="-1"><a class="header-anchor" href="#_2-string新增方法" aria-hidden="true">#</a> 2 String新增方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// unicode 空白符</span>
 <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;\\u2000&#39;</span><span class="token punctuation">;</span>
 <span class="token class-name">String</span> str <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token string">&quot;abc&quot;</span> <span class="token operator">+</span> c<span class="token punctuation">;</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;[%s]&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;trim[%s]&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;strip[%s]&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 str <span class="token operator">=</span> <span class="token string">&quot; abc &quot;</span><span class="token punctuation">;</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;[%s]&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;trim[%s]&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;strip[%s]&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>输出</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span> abc <span class="token punctuation">]</span>
trim<span class="token punctuation">[</span> abc <span class="token punctuation">]</span>
strip<span class="token punctuation">[</span>abc<span class="token punctuation">]</span>
<span class="token punctuation">[</span> abc <span class="token punctuation">]</span>
trim<span class="token punctuation">[</span>abc<span class="token punctuation">]</span>  str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>可以删除空格
strip<span class="token punctuation">[</span>abc<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 判断字符串是否为空白</span>
<span class="token string">&quot; &quot;</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 去除首尾空格</span>
<span class="token string">&quot; Javastack &quot;</span><span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Javastack&quot;</span>
<span class="token comment">// 去除尾部空格</span>
<span class="token string">&quot; Javastack &quot;</span><span class="token punctuation">.</span><span class="token function">stripTrailing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot; Javastack&quot;</span>
<span class="token comment">// 去除首部空格</span>
<span class="token string">&quot; Javastack &quot;</span><span class="token punctuation">.</span><span class="token function">stripLeading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Javastack &quot;</span>
<span class="token comment">// 复制字符串</span>
<span class="token string">&quot;Java&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &quot;JavaJavaJava&quot;</span>
<span class="token comment">// 行数统计</span>
<span class="token string">&quot;A\\nB\\nC&quot;</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-局部变量类型推断" tabindex="-1"><a class="header-anchor" href="#_3-局部变量类型推断" aria-hidden="true">#</a> 3 局部变量类型推断</h3><p>Lambda表达式中，可以使用var关键字来标识变量，变量类型由编译器自行推断</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ruby&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">var</span> s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-stream" tabindex="-1"><a class="header-anchor" href="#_4-stream" aria-hidden="true">#</a> 4 Stream</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 0</span>
<span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [1, 2]</span>
<span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span>n <span class="token operator">-&gt;</span> n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [3, 2, 1]</span>
<span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dropWhile</span><span class="token punctuation">(</span>n <span class="token operator">-&gt;</span> n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-optional" tabindex="-1"><a class="header-anchor" href="#_5-optional" aria-hidden="true">#</a> 5 Optional</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// javastack</span>
<span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;javastack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;msg:&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;msg.orElse:&quot;</span> <span class="token operator">+</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">&quot;11111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1</span>
<span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;javastack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;count:&quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// javastack</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;javastack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;obj:&quot;</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 没有值，抛出异常</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;msg.orElse:&quot;</span> <span class="token operator">+</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-inputstream" tabindex="-1"><a class="header-anchor" href="#_6-inputstream" aria-hidden="true">#</a> 6 InputStream</h3><p>transferTo inputStrem -&gt; OutputStream</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> classLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> inputStream <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;application.yml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> javastack <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token string">&quot;application-target&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>javastack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	inputStream<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;java.io.tmpdir:&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;java.io.tmpdir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-http-client-api" tabindex="-1"><a class="header-anchor" href="#_7-http-client-api" aria-hidden="true">#</a> 7 HTTP Client API</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token constant">URI</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">.</span><span class="token function">newHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 同步</span>
<span class="token class-name">HttpResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">HttpResponse<span class="token punctuation">.</span>BodyHandlers</span><span class="token punctuation">.</span><span class="token function">ofString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 异步</span>
client<span class="token punctuation">.</span><span class="token function">sendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token class-name">HttpResponse<span class="token punctuation">.</span>BodyHandlers</span><span class="token punctuation">.</span><span class="token function">ofString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span><span class="token class-name">HttpResponse</span><span class="token operator">::</span><span class="token function">body</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-读写文件" tabindex="-1"><a class="header-anchor" href="#_8-读写文件" aria-hidden="true">#</a> 8 读写文件</h3><p>对Files类增加了<strong>writeString</strong>和<strong>readString</strong>两个静态方法，可以直接把String写入文件，或者把整个文件读出为一个String：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;./&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>
  	<span class="token comment">// 路径</span>
  	<span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tmp.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  	<span class="token comment">// 内容</span>
  	<span class="token string">&quot;hello, jdk11 files api&quot;</span><span class="token punctuation">,</span>
  	<span class="token comment">// 编码</span>
  	<span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span>
  	<span class="token comment">// 路径</span>
  	<span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;./tmp.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  	<span class="token comment">// 编码</span>
  	<span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jdk12" tabindex="-1"><a class="header-anchor" href="#jdk12" aria-hidden="true">#</a> JDK12</h2><h3 id="_1-switch" tabindex="-1"><a class="header-anchor" href="#_1-switch" aria-hidden="true">#</a> 1 switch</h3><p>无break</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> 		<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MONDAY</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TUESDAY</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">WEDNESDAY</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">THURSDAY</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">FRIDAY</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SATURDAY</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SUNDAY</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSwitch</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">TUESDAY</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">WEDNESDAY</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-shenandoah-gc" tabindex="-1"><a class="header-anchor" href="#_2-shenandoah-gc" aria-hidden="true">#</a> 2 Shenandoah GC</h3><p>Redhat 主导开发的 Pauseless GC 实现，从大概 2013 年开始研发，终于取得了重要的阶段性成果，与其他 Pauseless GC 类似，Shenandoah GC 主要目标是 99.9% 的暂停小于 10ms，暂停与堆大小无关等。</p><h3 id="_3-支持unicode-11-0" tabindex="-1"><a class="header-anchor" href="#_3-支持unicode-11-0" aria-hidden="true">#</a> 3 支持Unicode 11.0</h3><p>JDK 12版本包含对Unicode 11.0.0的支持。 在支持Unicode 10.0.0的JDK 11发行之后，Unicode 11.0.0引入了JDK 12现在包含的以下新功能：</p><ul><li>684个新字符</li><li>11个新blocks</li><li>7个新脚本。</li></ul><h3 id="_4-numberformat增加了对以紧凑格式格式化数字的支持" tabindex="-1"><a class="header-anchor" href="#_4-numberformat增加了对以紧凑格式格式化数字的支持" aria-hidden="true">#</a> 4 NumberFormat增加了对以紧凑格式格式化数字的支持</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">NumberFormat</span> fmt <span class="token operator">=</span> <span class="token class-name">NumberFormat</span><span class="token punctuation">.</span><span class="token function">getCompactNumberInstance</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">US</span><span class="token punctuation">,</span> <span class="token class-name">NumberFormat<span class="token punctuation">.</span>Style</span><span class="token punctuation">.</span><span class="token constant">SHORT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">String</span> result <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result1:&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
 result <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result2:&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
# 结果
result1<span class="token operator">:</span><span class="token number">1</span>K
result2<span class="token operator">:</span><span class="token number">1</span>M
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jdk13" tabindex="-1"><a class="header-anchor" href="#jdk13" aria-hidden="true">#</a> JDK13</h2><h3 id="_1-switch表达式" tabindex="-1"><a class="header-anchor" href="#_1-switch表达式" aria-hidden="true">#</a> 1 switch表达式</h3><p>传统的case ...：labels（需要break）或新case ...-&gt;labels（不需要break） ，还有另一个新语句，用于从switch表达式产生值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> numLetters <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span> <span class="token operator">-&gt;</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">TUESDAY</span>                <span class="token operator">-&gt;</span> <span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span>     <span class="token operator">-&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">WEDNESDAY</span>              <span class="token operator">-&gt;</span> <span class="token number">9</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-文本块" tabindex="-1"><a class="header-anchor" href="#_2-文本块" aria-hidden="true">#</a> 2 文本块</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
                第一行
                第二行
                第三行
                &quot;&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java.lang.Character支持12.1级别的Unicode字符数据库，其中12.0自11.0起增加了554个字符，总共137,928个字符。</p><h3 id="_3-zgc的增强" tabindex="-1"><a class="header-anchor" href="#_3-zgc的增强" aria-hidden="true">#</a> 3 ZGC的增强</h3><h3 id="_4-支持unicode-12-1" tabindex="-1"><a class="header-anchor" href="#_4-支持unicode-12-1" aria-hidden="true">#</a> 4 支持Unicode 12.1</h3><h2 id="jdk14" tabindex="-1"><a class="header-anchor" href="#jdk14" aria-hidden="true">#</a> JDK14</h2><h3 id="_1-instanceof匹配" tabindex="-1"><a class="header-anchor" href="#_1-instanceof匹配" aria-hidden="true">#</a> 1 instanceof匹配</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 自动传值至变量abc</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span> abc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-空指针提示" tabindex="-1"><a class="header-anchor" href="#_2-空指针提示" aria-hidden="true">#</a> 2 空指针提示</h3><h3 id="_3-record类型" tabindex="-1"><a class="header-anchor" href="#_3-record类型" aria-hidden="true">#</a> 3 record类型</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>record Student(String name, int age) {
	public void daydayUp() {
  	System.out.println(String.format(&quot;[%s][%s] daydayup&quot;, name, age));
  }
}

@Test
public void testRecord() {
	Student student = new Student(&quot;NOHI&quot;, 18);
	System.out.println(student);
	student.daydayUp();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jdk15" tabindex="-1"><a class="header-anchor" href="#jdk15" aria-hidden="true">#</a> JDK15</h2><p>2020/09/15 发布</p><h3 id="_1-密封类sealed-classes-预览特性" tabindex="-1"><a class="header-anchor" href="#_1-密封类sealed-classes-预览特性" aria-hidden="true">#</a> 1 密封类Sealed Classes <strong>（预览特性）</strong></h3><h3 id="_2-文本块功能转正" tabindex="-1"><a class="header-anchor" href="#_2-文本块功能转正" aria-hidden="true">#</a> 2 <strong>文本块功能转正</strong></h3><h3 id="_3-shenandoah-垃圾回收算法转正" tabindex="-1"><a class="header-anchor" href="#_3-shenandoah-垃圾回收算法转正" aria-hidden="true">#</a> 3 Shenandoah 垃圾回收算法转正</h3><h2 id="jdk-16" tabindex="-1"><a class="header-anchor" href="#jdk-16" aria-hidden="true">#</a> JDK 16</h2><p>2021/03/16发布</p><h3 id="_1-instanceof-功能转正" tabindex="-1"><a class="header-anchor" href="#_1-instanceof-功能转正" aria-hidden="true">#</a> 1 instanceof 功能转正</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>if (object instanceof Kid kid) {
// ...
} else if (object instanceof Kiddle kiddle) {
// ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-records-转正" tabindex="-1"><a class="header-anchor" href="#_2-records-转正" aria-hidden="true">#</a> 2 Records 转正</h3><h3 id="_3-zgc" tabindex="-1"><a class="header-anchor" href="#_3-zgc" aria-hidden="true">#</a> 3 ZGC</h3><p>ZGC 最早是在 JDK 11 中集成进来的，在 JDK 15 中正式转正。</p><p>这个版本则是为了让 ZGC 支持并发栈处理，解决了最后一个重大瓶颈，把 ZGC 中的线程栈处理从安全点移到了并发阶段。并且还提供了一种机制，使得其他 HotSpot 子系统可以通过该机制延迟处理线程栈。</p><h2 id="jdk17" tabindex="-1"><a class="header-anchor" href="#jdk17" aria-hidden="true">#</a> JDK17</h2><h3 id="_1-switch-1" tabindex="-1"><a class="header-anchor" href="#_1-switch-1" aria-hidden="true">#</a> 1 switch</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">animalMoving</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token class-name">Rabbit</span> r <span class="token operator">-&gt;</span> r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token class-name">Bird</span> b <span class="token operator">-&gt;</span> b<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token keyword">null</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;null....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span> <span class="token operator">-&gt;</span> animal<span class="token punctuation">.</span><span class="token function">moving</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-密封类转正" tabindex="-1"><a class="header-anchor" href="#_2-密封类转正" aria-hidden="true">#</a> 2 密封类转正</h3><h2 id="jdk18" tabindex="-1"><a class="header-anchor" href="#jdk18" aria-hidden="true">#</a> JDK18</h2><h3 id="_1-默认使用utf-8字符编码" tabindex="-1"><a class="header-anchor" href="#_1-默认使用utf-8字符编码" aria-hidden="true">#</a> 1 默认使用UTF-8字符编码</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Dfile.encode=UTF-8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-简单web服务器" tabindex="-1"><a class="header-anchor" href="#_2-简单web服务器" aria-hidden="true">#</a> 2 简单web服务器</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jwebserver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-将被移除的方法" tabindex="-1"><a class="header-anchor" href="#_3-将被移除的方法" aria-hidden="true">#</a> 3 将被移除的方法</h3><p>Object中的finalize方法，Thread中的stop方法将在未来被删除</p>`,91);function b(h,g){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,r,k,d,n("blockquote",null,[n("p",null,[n("a",v,[s("模块化"),c(a)])])]),m])}const y=t(i,[["render",b],["__file","JDK9-17.html.vue"]]);export{y as default};
