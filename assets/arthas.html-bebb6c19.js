import{_ as i,M as r,p as d,q as s,R as t,t as e,N as p,a1 as a}from"./framework-449724a9.js";const o={},n=t("h1",{id:"arthas",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#arthas","aria-hidden":"true"},"#"),e(" arthas")],-1),c=t("p",null,"常用命令",-1),h=a('<li><p>dashboard　实时数据面板</p></li><li><p>thread　 JVM 的线程堆栈信息</p><ul><li><p>Arthas支持管道，可以用 <code>thread 1 | grep &#39;main(&#39;</code> 查找到<code>main class</code></p></li><li><p>thread -b, 找出当前阻塞其他线程的线程</p></li><li><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>id</em></td><td>线程id</td></tr><tr><td>[n:]</td><td>指定最忙的前N个线程并打印堆栈</td></tr><tr><td>[b]</td><td>找出当前阻塞其他线程的线程</td></tr><tr><td>[i ``]</td><td>指定cpu占比统计的采样间隔，单位为毫秒</td></tr></tbody></table></li></ul></li><li><p>jvm JVM 的信息</p><p>​ THREAD相关</p><ul><li><p>COUNT: JVM当前活跃的线程数</p></li><li><p>DAEMON-COUNT: JVM当前活跃的守护线程数</p></li><li><p>PEAK-COUNT: 从JVM启动开始曾经活着的最大线程数</p></li><li><p>STARTED-COUNT: 从JVM启动开始总共启动过的线程次数</p></li><li><p>DEADLOCK-COUNT: JVM当前死锁的线程数</p><p>文件描述符相关</p></li><li><p>MAX-FILE-DESCRIPTOR-COUNT：JVM进程最大可以打开的文件描述符数</p></li><li><p>OPEN-FILE-DESCRIPTOR-COUNT：JVM当前打开的文件描述符数</p></li></ul></li><li><p>sc JVM已加载的类信息</p><ul><li>sc -d *MathGame</li></ul></li><li><p>sm 已加载类的方法信息</p><ul><li>sm 类</li></ul></li><li><p>dump</p><ul><li>dump xxx.ccc.ccc 已加载类的 bytecode 到特定目录</li></ul></li><li><p>heapdump dump java heap, 类似jmap命令的heap dump功能。</p><ul><li><p>dump到指定文件 heapdump /tmp/dump.hprof</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>heapdump /home/cbpc/dump.hprof\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>只dump live对象 heapdump --live /tmp/dump.hprof</p></li></ul></li><li><p>jad 反编译指定已加载类的源码</p><ul><li>jad demo.MathGame</li></ul></li><li><p>classloader 查看classloader的继承树，urls，类加载信息，使用classloader去getResource</p></li><li><p>monitor 方法执行监控</p><ul><li>monitor -c 5 demo.MathGame primeFactors -c 为周期</li></ul></li><li><p>watch 方法执行数据观测</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td><em>method-pattern</em></td><td>方法名表达式匹配</td></tr><tr><td><em>express</em></td><td>观察表达式</td></tr><tr><td><em>condition-express</em></td><td>条件表达式</td></tr><tr><td>[b]</td><td>在<strong>方法调用之前</strong>观察</td></tr><tr><td>[e]</td><td>在<strong>方法异常之后</strong>观察</td></tr><tr><td>[s]</td><td>在<strong>方法返回之后</strong>观察</td></tr><tr><td>[f]</td><td>在<strong>方法结束之后</strong>(正常返回和异常返回)观察</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td>[x:]</td><td>指定输出结果的属性遍历深度，默认为 1</td></tr></tbody></table><ul><li>watch demo.MathGame primeFactors returnObj</li><li>watch com.ccdc.pi.market.service.MainTaskService getMyTodoTask &quot;{params,returnObj}&quot; -x 3</li><li>3表示显示深度</li></ul></li><li><p>trace 方法内部调用路径，并输出方法路径上的每个节点上耗时</p></li><li><p>stack 输出当前方法被调用的调用路径</p><ul><li>stack demo.MathGame primeFactors</li></ul></li><li><p>tt 方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</p></li><li><p>reset 重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类</p></li><li><p>quit 退出</p></li><li><p>shutdown 关闭 Arthas 服务端，所有 Arthas 客户端全部退出</p></li>',17),u={href:"https://github.com/jvm-profiling-tools/async-profiler",target:"_blank",rel:"noopener noreferrer"},m=t("pre",null,[t("code",null,`* profiler start
`)],-1),b=a(`<h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><blockquote><p>参见: https://alibaba.github.io/arthas/install-detail.html#</p></blockquote><ul><li>全量: https://repository.sonatype.org/service/local/repositories/central-proxy/content/com/taobao/arthas/arthas-packaging/3.0.5/arthas-packaging-3.0.5-bin.zip</li><li>快速: https://alibaba.github.io/arthas/arthas-boot.jar</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>安装: 执行 ./install.sh
启动: 执行 ./as.sh pid  或者 java -jar arthas-boot.jar --target-ip 0.0.0.0
	   如果多个线程，输入对应数字回车进入
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dashboard" tabindex="-1"><a class="header-anchor" href="#dashboard" aria-hidden="true">#</a> dashboard</h2>`,5);function g(v,_){const l=r("ExternalLinkIcon");return d(),s("div",null,[n,t("ul",null,[t("li",null,[c,t("ul",null,[h,t("li",null,[t("p",null,[e("profiler 使用"),t("a",u,[e("async-profiler"),p(l)]),e("生成火焰图")])])]),m])]),b])}const f=i(o,[["render",g],["__file","arthas.html.vue"]]);export{f as default};
