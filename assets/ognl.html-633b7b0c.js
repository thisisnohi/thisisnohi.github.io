import{_ as a,p as l,q as e,a1 as i}from"./framework-449724a9.js";const t={},o=i('<h1 id="ognl" tabindex="-1"><a class="header-anchor" href="#ognl" aria-hidden="true">#</a> OGNL</h1><blockquote><p>20190130 https://www.cnblogs.com/cenyu/p/6233942.html</p></blockquote><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><ul><li><p>OGNL表达式 OGNL是Object Graphic Navigation Language(对象图导航语言)的缩写，他是一个开源项目。Struts框架使用OGNL作为默认的表达式语言</p></li><li><p>OGNL优势</p><ul><li><p>支持对象方法调用，如：×××.doSomeSpecial();</p></li><li><p>支持类静态的方法调用和值访问，表达式的格式 @[类全名（包括包路径）]@[方法名 | 值名] 例如： @java.lang.String@format(&#39;foo %s&#39;, &#39;bar&#39;)或@tutorial.MyConstant@APP_NAME；</p></li><li><p>支持赋值操作和表达式串联</p><blockquote><p>如price=100, discount=0.8,calculatePrice()，这个表达式会返回80；</p></blockquote></li><li><p>访问OGNL上下文（OGNL context）和ActionContext；</p></li><li><p>操作（创建）集合对象。</p></li></ul><p>OGNL 有一个上下文（Context）概念，说白了上下文就是一个MAP结构，它实现了java.utils.Map 的接口。</p></li></ul><h2 id="ognl-表达式" tabindex="-1"><a class="header-anchor" href="#ognl-表达式" aria-hidden="true">#</a> OGNL 表达式</h2><ul><li>常量： 字符串：“ hello ” 字符：‘ h ’ 数字：除了像 java 的内置类型 int,long,float 和 double,Ognl 还有如例：10.01B，相当于 java.math.BigDecimal，使用’ b ’或者’ B ’后缀。 100000H，相当于 java.math.BigInteger，使用’ h ’ 或 ’ H ’ 后缀。</li><li>属性的引用 例如：user.name</li><li>变量的引用 例如：#name</li><li>静态变量的访问 使用 @class@field</li><li>静态方法的调用 使用 @class@method(args), 如果没有指定 class 那么默认就使用java.lang.Math.</li><li>构造函数的调用 例如：new java.util.ArrayList();</li></ul>',6),n=[o];function c(r,s){return l(),e("div",null,n)}const p=a(t,[["render",c],["__file","ognl.html.vue"]]);export{p as default};
