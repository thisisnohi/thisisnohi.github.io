import{_ as i,p as l,q as a,a1 as e}from"./framework-449724a9.js";const r="/assets/image-20221113112541763-a78f92fc.png",h={},d=e('<h1 id="_09方法区" tabindex="-1"><a class="header-anchor" href="#_09方法区" aria-hidden="true">#</a> 09方法区</h1><ul><li><p>栈、堆、方法区的交互关系</p></li><li><p>方法区的理解</p></li><li><p>设置方法区的大小与OOM</p></li><li><p>方法区的内部结构</p></li><li><p>方法区使用举例</p></li><li><p>方法区的演变过程</p></li><li><p>方法区的垃圾回收</p></li><li><p>总结</p></li></ul><h2 id="_1-栈、堆、方法区的交互关系" tabindex="-1"><a class="header-anchor" href="#_1-栈、堆、方法区的交互关系" aria-hidden="true">#</a> 1 栈、堆、方法区的交互关系</h2><p><img src="'+r+'" alt="image-20221113112541763"></p><h2 id="_2-方法区的理解" tabindex="-1"><a class="header-anchor" href="#_2-方法区的理解" aria-hidden="true">#</a> 2 方法区的理解</h2><ul><li>独立于堆的空间，非堆</li><li>线程共享</li><li>方法区大小决定了系统可以保存多少个类，定义类太多可能导致 OOM Metaspace(JDK8 PermGen space JDK7)</li><li>JDK7 之前称为永久代 JDK8元空间</li><li>元空间不在虚拟机内存，而使用本地内存</li></ul><h2 id="_3设置方法区的大小与oom" tabindex="-1"><a class="header-anchor" href="#_3设置方法区的大小与oom" aria-hidden="true">#</a> 3设置方法区的大小与OOM</h2><ul><li>JDK7及之前 <ul><li>-XX：PermSize 初始大小 默认20.75M</li><li>-XX:MaxPermSize 最大大小，32位机器默认64M, 64位机器82M</li><li>异常：OutofMemeoryError Perm Size</li></ul></li><li>JDK8及之后 <ul><li>-XX:MetaspaceSize=512m windows默认21m</li><li>-XX:MaxMetaspaceSize 默认-1，即没有限制</li></ul></li></ul><h2 id="_4-方法区的内部结构" tabindex="-1"><a class="header-anchor" href="#_4-方法区的内部结构" aria-hidden="true">#</a> 4 方法区的内部结构</h2><ul><li>类型信息、常量、静态变量、即时编译器编译后的代码缓存</li><li>常量池（字节码） <ul><li>常量值</li><li>字符串值</li><li>类引用</li><li>字段引用</li><li>方法引用</li></ul></li><li>运行时常量池（方法区）</li></ul><h2 id="_5-方法区使用举例" tabindex="-1"><a class="header-anchor" href="#_5-方法区使用举例" aria-hidden="true">#</a> 5 方法区使用举例</h2><h2 id="_6-方法区的演变过程" tabindex="-1"><a class="header-anchor" href="#_6-方法区的演变过程" aria-hidden="true">#</a> 6 方法区的演变过程</h2><ul><li>Hot Spot 存在永久代，共享堆，JRocket J9 不存在永久代存在元空间</li><li>Oracle 收购 Bea后，JDK8移出永久代，改用元空间</li><li>永久代信息大小相对固定</li><li>永久代垃圾回收困难</li></ul><h2 id="_7-方法区的垃圾回收" tabindex="-1"><a class="header-anchor" href="#_7-方法区的垃圾回收" aria-hidden="true">#</a> 7 方法区的垃圾回收</h2><ul><li>常量池中废弃的常量</li><li>不再使用的类型（条件较苛刻，费力不讨好）</li></ul><h2 id="_8-总结" tabindex="-1"><a class="header-anchor" href="#_8-总结" aria-hidden="true">#</a> 8 总结</h2>',16),t=[d];function n(c,s){return l(),a("div",null,t)}const o=i(h,[["render",n],["__file","09_方法区.html.vue"]]);export{o as default};
