import{_ as e}from"./image-20221126191054010-bc2a5ba1.js";import{_ as i,p as a,q as l,a1 as o}from"./framework-449724a9.js";const d="/assets/image-20221213220441144-4a97f988.png",c={},r=o('<h1 id="_33-jvm参数选项类型" tabindex="-1"><a class="header-anchor" href="#_33-jvm参数选项类型" aria-hidden="true">#</a> 33 JVM参数选项类型</h1><h3 id="类型一-标准参数选项" tabindex="-1"><a class="header-anchor" href="#类型一-标准参数选项" aria-hidden="true">#</a> 类型一：标准参数选项</h3><p>比较稳定，后续版本基本不会变化</p><p>以<code>-</code>开关</p><p>运行<code>java</code>/<code>java -help</code>查看所有选项</p><h3 id="类型二-x参数选项" tabindex="-1"><a class="header-anchor" href="#类型二-x参数选项" aria-hidden="true">#</a> 类型二：-X参数选项</h3><p>非标准化参数，功能比较稳定，但官方后续版本可能会变更</p><p>以<code>-X</code>开关</p><p>运行<code>java -X</code>命令可以看到所有的X选项</p><h3 id="类型三-xx参数选项" tabindex="-1"><a class="header-anchor" href="#类型三-xx参数选项" aria-hidden="true">#</a> 类型三：-XX参数选项</h3><p>非标准化参数</p><p>使用最多的参数类型</p><p>这类选项属于实验性，不稳定</p><p>以<code>-XX</code>开头</p><ul><li>作用：用于开发和调试JVM</li></ul><h2 id="打印参数" tabindex="-1"><a class="header-anchor" href="#打印参数" aria-hidden="true">#</a> 打印参数</h2><ul><li>java -XX:+PrintFlagInitial 查看所有JVM参数启动的初始值</li><li>java -XX:+PrintFlagsFinal 查看所有JVM参数的最终值</li></ul><h2 id="常用jvm参数选项设置" tabindex="-1"><a class="header-anchor" href="#常用jvm参数选项设置" aria-hidden="true">#</a> 常用JVM参数选项设置</h2><h3 id="堆、栈、方法区" tabindex="-1"><a class="header-anchor" href="#堆、栈、方法区" aria-hidden="true">#</a> 堆、栈、方法区</h3><ul><li><p>栈 <code>-Xss128k</code></p><ul><li>等价于 <code>-XX:+ThreadStackSize=128k</code></li></ul></li><li><p>堆</p><ul><li><p><code>-Xms512m</code> 等价于 <code>-XX:InitialHeapSize=512m</code></p></li><li><p><code>-Xmx512m</code> 等价于 <code>-XX:MaxHeapSize=512m</code></p></li><li><p><code>-Xmn128m</code> 等价于 <code>-XX:InitialHeapSize=512m</code> 年轻代</p><ul><li>官方推荐设置为整个堆的2/3</li></ul></li><li><p><code>-XX:NewSize=1024m</code> 设置年轻代初始值</p></li><li><p><code>-XX:MaxNewSize=1024m</code> 设置年轻代最大值</p></li><li><p><code>-XX:SurviorRation=8 </code> 设置年轻代中Eden我与一个Surivor区的比值，默认为8</p><ul><li>真实情况会开启<code>-XX:+UseAdaptiveSizePolicy</code>，出现6:1:1情况，而非8:1:1</li></ul></li><li><p><code>-XX:+UseAdaptiveSizePolicy</code> 自动选择各区大小比例</p></li><li><p><code>-XX:NewRation=4</code> 设置老年代与年轻代（包括一个Eden和2个Survivor区）的比值</p></li><li><p><code>-XX:PretenureSizeThreadhold=1024</code> 设置让大于此阈值的对象直接分配至老年代，单位字节</p><ul><li>只对Serial、ParNew收集器生效</li></ul></li><li><p><code>-XX:MaxTenuringThreshold=15</code>默认值 15，新生代每次GC后，还存活的对象年龄+1，当对象年龄大于该值，进入老年代</p></li><li><p><code>-XX:+PrintTenuringDistribution</code> 让JVM在每次MinorGC后打印出当前使用的Surivor中对象的年龄分布</p></li><li><p><code>-XX:TargetSurvivorRation</code> 表示MinorGC结束后Survivor区域中占用空间的期望比例</p></li></ul></li><li><p>方法区</p><ul><li>永久代 <ul><li>-XX:PermSize=256m</li><li>-XX:MaxPermSize=256m</li></ul></li><li>元空间（JDK1.8及后） <ul><li><code>-XX:MetaspaceSize</code>初始空间大小</li><li><code>-XX:MaxMetaspaceSize</code> 最在空间、默认没有限制</li><li><code>-XX:+UseCompressedOops</code>压缩对象指针</li><li><code>-XX+UseCompressedClassPointers</code>压缩类指针</li><li><code>-XX:CompressedClassSpaceSize</code>设置class metaspace的大小，默认1g</li></ul></li></ul></li><li><p>直接内存</p><ul><li><code>-XX:MaxDirectMemorySize</code>指定DirectMemory容量，若未指定，则默认与Java堆最大值一样</li></ul></li></ul><h3 id="outofmemory相关选项" tabindex="-1"><a class="header-anchor" href="#outofmemory相关选项" aria-hidden="true">#</a> OutOfMemory相关选项</h3><ul><li><code>-XX:+HeapDumpOnOutOfMemoryError</code></li><li><code>-XX:+HeapDumpBeforeFullGC</code></li><li><code>-XX:HeapDumpPath=&lt;path&gt;</code></li><li><code>-XX:OnOutOfMemoryError</code>指定一个可行性程序或者脚本的路径，当发生OOM时，执行此脚本</li></ul><h3 id="垃圾回收器相关选项" tabindex="-1"><a class="header-anchor" href="#垃圾回收器相关选项" aria-hidden="true">#</a> 垃圾回收器相关选项</h3><ul><li>垃圾收集器组合关系</li></ul><img src="'+e+'" alt="image-20221126191054010" style="zoom:67%;"><h3 id="gc日志相关选项" tabindex="-1"><a class="header-anchor" href="#gc日志相关选项" aria-hidden="true">#</a> GC日志相关选项</h3><ul><li><code>-XX:+PrintGC</code> 输出GC日志，类似：-verbose:gc</li><li><code>-XX:+PrintGCDetails</code> 转出GC详细日志</li><li><code>-XX:+PrintGCTimeStamps</code> 输出GC的时间戳(以基准时间的形式) <ul><li>JDK11后：<code>-Xlog:gc::utctime -XX:NativeMemoryTracking=summary</code></li></ul></li><li><code>-XX:+PrintGCDateStamps</code> 输出GC的时间戳(以日期的形式，如：2022-11-28T13:01:03.123+0800)</li><li><code>-XX:PrintHeapAtGC</code> 在进行GC的前后打印出堆的信息</li><li><code>-Xloggc:../logs/gc.log</code> 日志文件输出路径</li></ul><h3 id="通过java代码获取jvm参数" tabindex="-1"><a class="header-anchor" href="#通过java代码获取jvm参数" aria-hidden="true">#</a> 通过java代码获取JVM参数</h3><p><img src="'+d+'" alt="image-20221213220441144"></p>',29),t=[r];function p(X,h){return a(),l("div",null,t)}const u=i(c,[["render",p],["__file","33_JVM运行时参数.html.vue"]]);export{u as default};
