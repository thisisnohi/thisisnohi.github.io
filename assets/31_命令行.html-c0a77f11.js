import{_ as i,p as e,q as l,a1 as a}from"./framework-449724a9.js";const t={},n=a(`<h1 id="_31-命令行" tabindex="-1"><a class="header-anchor" href="#_31-命令行" aria-hidden="true">#</a> 31 命令行</h1><h2 id="_02-jps-查看正在运行的java进程" tabindex="-1"><a class="header-anchor" href="#_02-jps-查看正在运行的java进程" aria-hidden="true">#</a> 02 jps 查看正在运行的Java进程</h2><ul><li>jps (Java Process Status)</li><li>jps -q 只显示pid</li><li>jps -l 显示程序主类的全类名，如果执行的是jar，输出jar完整路径</li><li>jps -m 输出启动时，应用参数参数即传递给main函数参数</li><li>jps -v 列出虚拟机进程启动时JVM参数</li><li>JVM参数 -XX：-UsePerfData jps命令无法探知该java进程</li></ul><h2 id="_03-jstat-查看jvm的统计信息" tabindex="-1"><a class="header-anchor" href="#_03-jstat-查看jvm的统计信息" aria-hidden="true">#</a> 03 jstat 查看JVM的统计信息</h2><ul><li><p>jstat (JVM Statistics Monitoring Tool) 显示本地或者远程虚拟机进程中的类装载、内在、垃圾收集、JIT编译等运行数据</p><ul><li>在没有GUI图形界面，只能提供纯文本控制台服务器上，其是运行定位虚拟机性能问题的首选工具</li></ul></li><li><p>参数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>╰─➤  jstat -help                                                                                                                                                                     Usage: jstat --help|-options
       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]
Definitions:
  &lt;option&gt;      An option reported by the -options option
  &lt;vmid&gt;        Virtual Machine Identifier. A vmid takes the following form:
                     &lt;lvmid&gt;[@&lt;hostname&gt;[:&lt;port&gt;]]
                Where &lt;lvmid&gt; is the local vm identifier for the target
                Java virtual machine, typically a process id; &lt;hostname&gt; is
                the name of the host running the target Java virtual machine;
                and &lt;port&gt; is the port number for the rmiregistry on the
                target host. See the jvmstat documentation for a more complete
                description of the Virtual Machine Identifier.
  &lt;lines&gt;       Number of samples between header lines.
  &lt;interval&gt;    Sampling interval. The following forms are allowed:
                    &lt;n&gt;[&quot;ms&quot;|&quot;s&quot;]
                Where &lt;n&gt; is an integer and the suffix specifies the units as
                milliseconds(&quot;ms&quot;) or seconds(&quot;s&quot;). The default units are &quot;ms&quot;.
  &lt;count&gt;       Number of samples to take before terminating.
  -J&lt;flag&gt;      Pass &lt;flag&gt; directly to the runtime system.
  -? -h --help  Prints this help message.
  -help         Prints this help message.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</code></p><ul><li>option 参数</li><li>interval 间隔时间</li><li>count 指定查询次数</li><li>-t 显示程序运行时间，单位秒</li><li>-h 可以在周期性数据输出时，输出多少行数据后输出一个表头信息</li></ul></li><li><p>option</p><ul><li>类装载相关的 <ul><li>-class 显示ClassLoader的相关信息：类的装载、卸载数量、总空间、类装载所消耗的时间等</li></ul></li><li>垃圾回收 <ul><li>-gc 显示与gc相关的堆信息，各区容量</li><li>-gccapacity，与-gc基本相同，但输出主要关注java堆各个区域使用的最大、最小空间</li><li>-gcutil: 与-gc基本相同，但输出主要关注已使用空间占总空间的百分比</li><li>-gccause 导致最后一次或当前正在发生GC产生的原因</li><li>-gcnew 显示新生代GC状况</li><li>-gcnewcapacity 显示与-gcnew基本相同，主要关注使用的最大、最小空间</li><li>-gcold 显示老年代GC情况</li><li>-gcoldcapacity 显示-gcold基本相同，输出主要关注使用到的最大、最小空间</li></ul></li></ul></li></ul><h2 id="_04-jinfo" tabindex="-1"><a class="header-anchor" href="#_04-jinfo" aria-hidden="true">#</a> 04 jinfo</h2><ul><li>jinfo (Configuration Info for Java) <ul><li>查看虚拟机配置参数信息，也可以调整虚拟机的配置信息</li></ul></li></ul><h3 id="查看" tabindex="-1"><a class="header-anchor" href="#查看" aria-hidden="true">#</a> 查看</h3><ul><li><p>jinfo -sysprops PID 可查看由System.getProperties()取得的参数</p></li><li><p>jinfo -flags PID 查看赋值的参数</p></li><li><p>jinfo -flag 具体参数 PID 查看某个参数的值</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>╰─➤  jinfo -flag UseG1GC 56499
-XX:+UseG1GC
╰─➤  jinfo -flag MaxHeapSize 56499
-XX:MaxHeapSize=2147483648
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="修改" tabindex="-1"><a class="header-anchor" href="#修改" aria-hidden="true">#</a> 修改</h3><p>可以修改被标记为manageable的可以被实时修改</p><ul><li>java -XX:+PrintFlagsFinal -version | grep manageable</li><li>jinfo -flag +PrintFlagsFinal PID</li></ul><h3 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展" aria-hidden="true">#</a> 拓展</h3><ul><li><p>java -XX:+PrintFlagInitial 查看所有JVM参数启动的初始值</p></li><li><p>java -XX:+PrintFlagsFinal 查看所有JVM参数的最终值</p></li></ul><h2 id="_05-jmap-导出内存映像文件-内存使用情况" tabindex="-1"><a class="header-anchor" href="#_05-jmap-导出内存映像文件-内存使用情况" aria-hidden="true">#</a> 05 jmap 导出内存映像文件&amp;内存使用情况</h2><ul><li>jmap （JVM Memory Map) 获取dump文件，获取目标java进程的内存信息</li></ul><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h3><ul><li>jmap [option] [PID]</li><li><code>jmap [option] &lt;executable&gt; &lt;core&gt;</code></li><li><code>jmap [option] [server_id@]&lt;remote server IP or hostname&gt;</code></li></ul><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><ul><li>-dump 生成java堆转储快照：dump文件</li><li>-heap 堆空间信息</li><li>-histo 堆中对象统计信息，包括类、实例数量和合计容量 <ul><li>-histo:live只统计堆中存活对象</li></ul></li><li>-permstat 以classloader为统计口径，输出永久代的内存状态信息</li><li>-finalizerinfo 显示F-queue 队列待执行finalize方法的对象</li><li>-F</li><li><code>-j &lt;flag&gt;</code></li></ul><h3 id="导出内存映像文件-dump" tabindex="-1"><a class="header-anchor" href="#导出内存映像文件-dump" aria-hidden="true">#</a> 导出内存映像文件/dump</h3><ul><li>自动 <ul><li>-XX:+HeapDumpOnOutOfMemoryError</li><li>-XX:+HeapDumpBeforeFullGC</li><li>-XX:HeapDumpPath=&lt;filename.hprof&gt;</li></ul></li><li>手动 <ul><li><code>jmap -dump:format=b,file=&lt;filename.hprof&gt; PID</code></li><li><code>jmap -dump:live,format=b,file=&lt;filename.hprof&gt; PID</code> 堆中存活对象</li></ul></li></ul><h3 id="显示内存信息" tabindex="-1"><a class="header-anchor" href="#显示内存信息" aria-hidden="true">#</a> 显示内存信息</h3><ul><li>jmap -heap PID (GraalVM 无效)</li><li>jmap -histo PID</li></ul><h2 id="_06-jhat-jvm-heap-analysis-tool" tabindex="-1"><a class="header-anchor" href="#_06-jhat-jvm-heap-analysis-tool" aria-hidden="true">#</a> 06 jhat (JVM Heap Analysis Tool)</h2><p>jhat与jmap搭配使用，用于分析jmap生成heap dump文件。jhat内置了一个微型HTTP/HTML服务器，生成dump文件分析结果。</p><p><code>http://localhost:7000/</code></p><p>jhat 在JDK9、JDK10中已经删除，官方建议用VisualVM</p><ul><li>命令：jmap -port 7001 2.hprof</li></ul><h2 id="_07-jstack-jvm-stack-trace" tabindex="-1"><a class="header-anchor" href="#_07-jstack-jvm-stack-trace" aria-hidden="true">#</a> 07 jstack(JVM Stack Trace)</h2><h3 id="关注的状态" tabindex="-1"><a class="header-anchor" href="#关注的状态" aria-hidden="true">#</a> 关注的状态</h3><ul><li>死锁 Deadlock(重点关注)</li><li>等待资源 Waiting on condition (重点关注)</li><li>等待获取监视器 Waiting on monitor entry (重点关注)</li><li>阻塞 Blocked(重点关注)</li><li>执行中 Runnable</li><li>暂停 Suspended</li><li>对象等待中 Object.wait() 或 TIMED_WAITING</li><li>停止 Parked</li></ul><h3 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1" aria-hidden="true">#</a> 参数</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Usage:
    jstack [-l] &lt;pid&gt;
        (to connect to running process)
    jstack -F [-m] [-l] &lt;pid&gt;
        (to connect to a hung process)
    jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;
        (to connect to a core file)
    jstack [-m] [-l] [server_id@]&lt;remote server IP or hostname&gt;
        (to connect to a remote debug server)

Options:
    -F  to force a thread dump. Use when jstack &lt;pid&gt; does not respond (process is hung)
    -m  to print both java and native frames (mixed mode)
    -l  long listing. Prints additional information about locks
    -h or -help to print this help message
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jcmd" tabindex="-1"><a class="header-anchor" href="#jcmd" aria-hidden="true">#</a> jcmd</h2><p>JDK1.7增加，多功能工具。</p><p>实现除jstat之外的所有命令功能。比如：导出堆、内存使用、查看Java进程、导出栈信息、GC、JVM运行时间</p><ul><li>命令参数 <ul><li>jcmd -l 列出所有jvm进程</li><li>jcmd 6316 help 针对指定进程，列出支持的所有命令</li><li>jcmd pid 具体指令 显示指定进程的指令命令数据 <ul><li>jcmd pid Thread.print</li></ul></li></ul></li></ul><h2 id="jstatd" tabindex="-1"><a class="header-anchor" href="#jstatd" aria-hidden="true">#</a> jstatd</h2><p>配合jps、jstat远程监控</p>`,40),s=[n];function d(r,o){return e(),l("div",null,s)}const h=i(t,[["render",d],["__file","31_命令行.html.vue"]]);export{h as default};
