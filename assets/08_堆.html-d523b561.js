import{_ as n,p as s,q as a,a1 as e}from"./framework-449724a9.js";const i="/assets/image-20221112141024465-5ab2ce49.png",l={},t=e(`<h1 id="_08-堆" tabindex="-1"><a class="header-anchor" href="#_08-堆" aria-hidden="true">#</a> 08 堆</h1><h2 id="_1-堆的核心概述" tabindex="-1"><a class="header-anchor" href="#_1-堆的核心概述" aria-hidden="true">#</a> 1 堆的核心概述</h2><ul><li>jvm启动时创建</li><li>一个jvm实例对应一个堆</li><li>堆物理上不连续，逻辑上连续</li><li>几乎所有对象都在堆上分配</li><li>数组、对象永不会存储在栈上，栈帧只存引用变量地址</li></ul><h2 id="_2-设置堆内存大小与oom" tabindex="-1"><a class="header-anchor" href="#_2-设置堆内存大小与oom" aria-hidden="true">#</a> 2 设置堆内存大小与OOM</h2><ul><li><p>jdk7及之前： 新生代+老年代+永久区 （PermSize)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Xms10M -Xmx20M -XPermSize
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>jdk8及之后：新生代+老年代+元空间 (MetaSpaceSize)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Xms10M -Xmx20M -XMetaspaceSize1024m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>默认大小</p><ul><li>初始大小：物理电脑内存 1/64</li><li>最大内存：物理电脑内存 1/4</li></ul></li><li><p>DEMO：</p><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Xms100m -Xmx110m -XX:+PrintGCDetails
 // 初始大小
 long initialMemory = Runtime.getRuntime().totalMemory() / 1024/1024;
 // 最大
 long maxMemory = Runtime.getRuntime().maxMemory() / 1024/1024;
 System.out.println(&quot;-Xms:&quot; + initialMemory + &quot;M&quot;);
 System.out.println(&quot;-Xmx:&quot; + maxMemory + &quot;M&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Xms:96M
-Xmx:98M
Heap
 PSYoungGen      total 29696K, used 9768K [0x00000007bdb80000, 0x00000007bfc80000, 0x00000007c0000000)
  eden space 25600K, 38% used [0x00000007bdb80000,0x00000007be50a388,0x00000007bf480000)
  from space 4096K, 0% used [0x00000007bf880000,0x00000007bf880000,0x00000007bfc80000)
  to   space 4096K, 0% used [0x00000007bf480000,0x00000007bf480000,0x00000007bf880000)
 ParOldGen       total 68608K, used 0K [0x00000007b9200000, 0x00000007bd500000, 0x00000007bdb80000)
  object space 68608K, 0% used [0x00000007b9200000,0x00000007b9200000,0x00000007bd500000)
 Metaspace       used 5059K, capacity 5328K, committed 5504K, reserved 1056768K
  class space    used 594K, capacity 627K, committed 640K, reserved 1048576K
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Gc</p><p><img src="`+i+`" alt="image-20221112141024465"></p></li></ul></li></ul><p>​ 设置值：100m = S0C+S1C+EC+OC = 4096 + 4096 + 25600 + 68608 = 102400 = 100m</p><p>​ -Xms:96M=S0C/S1c + EC + OC = 4096 + 25600 + 68608 = 98304 = 96M</p><ul><li>Virsualvm 插件：Visual GC 可显示GC情况</li></ul><h2 id="_3-年轻代与老年代" tabindex="-1"><a class="header-anchor" href="#_3-年轻代与老年代" aria-hidden="true">#</a> 3 年轻代与老年代</h2><ul><li><p>Eden Survivor0 Survivor1</p><ul><li><p>Eden 新创建对象</p></li><li><p>比例：默认 -XX:SurvivorRatio=8 8:1:1</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>不通过参数设置，并不满足8:1:1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>新生代/老年代比例</p><p>默认：-XX:NewRatio=2 新生代占1，老年代占2，即新生代点堆1/3</p></li><li><p>-Xmn 设置新生代空间大小</p></li><li><p>-XX:MaxTenuringThreshold=15 回收15次后如果还存活，晋升老年代</p></li></ul><h2 id="_4-图解对象分配过程" tabindex="-1"><a class="header-anchor" href="#_4-图解对象分配过程" aria-hidden="true">#</a> 4 图解对象分配过程</h2><p>Edgn区为 近直角三角形 S0/S1 为 间隔梯形 老年区 阶梯形</p><h2 id="_5-minorgc-majorgc-fullgc" tabindex="-1"><a class="header-anchor" href="#_5-minorgc-majorgc-fullgc" aria-hidden="true">#</a> 5 MinorGC MajorGC FullGC</h2><ul><li>并非每次三个区域同时回收，大部分回收是新生代</li><li>新生代回收： Minor GC / Young GC</li><li>老年代回收： Major GC / Old GC <ul><li>只有GMS GC 会单独收集老年代</li><li>很多时候 Major GC 和 Full GC混淆使用</li></ul></li><li>混合回收：Mixed GC, 回收整个新生代及部分老年代 <ul><li>目前只有G1 GC存在</li></ul></li><li>整堆回收： Full GC, 回收整个堆及方法区</li></ul><h3 id="触发机制" tabindex="-1"><a class="header-anchor" href="#触发机制" aria-hidden="true">#</a> 触发机制</h3><ul><li><p>年轻代 Minor GC</p><ul><li>Eden区空间不足时触发， Survivro不会触发GC</li><li>非常频繁，但回收速度快</li><li>会引发STW</li></ul></li><li><p>老年代 Major GC/Full GC</p><ul><li>出现之前，经常出现一次MinorGC （但Parallel 收器不会，期直接进行Major GC）</li><li>MajorGC速度一般比MinorGC慢10位以上，STW时间更长</li><li>Major之前内存仍不足，OOM</li></ul></li><li><p>Full GC触发：</p><ul><li>System.gc()，建议系统执行Full GC,但不必然执行</li><li>老年代空间不足</li><li>方法空间不足</li><li>通过MinorGC进入老年代大小，大于老年代可用内存</li></ul><p><strong>应尽量避免出现FullGC</strong></p></li></ul><h2 id="_6-堆空间分代思想" tabindex="-1"><a class="header-anchor" href="#_6-堆空间分代思想" aria-hidden="true">#</a> 6 堆空间分代思想</h2><ul><li>不同对象生命周期不一样，70-99% 对象是临时对象</li><li>优化GC性能</li></ul><h2 id="_7-内存分配策略" tabindex="-1"><a class="header-anchor" href="#_7-内存分配策略" aria-hidden="true">#</a> 7 内存分配策略</h2><ul><li><p>优先分配Eden</p></li><li><p>大对象直接分配到老年代</p></li><li><p>长期存活的对象分配到老年代</p></li><li><p>动态对象年龄判断</p><ul><li>Survivor相同年龄对象的内存总和大于Survivor空间一半，年龄大于等于此年龄对象直接进入老年代，无需等到MaxTenuringThreshold中要求的年龄</li></ul></li><li><p>DEMO直接分配对象到老年区</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/**
* 对象直接分配至老年代
* -Xms60m -Xmx60m -XX:NewRatio=2 -XX:+PrintGCDetails -XX:SurvivorRatio=8
*   Eden S0 S1 OLD
*    16   2  2  40
*/
public static void main(String[] args) {
	// 20M
	byte[] bytes = new byte[20 * 1024 * 1024];
	// Byte会出现Gc OOM 为啥？
	//Byte[] bytes = new Byte[20 * 1024 * 1024];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Heap
 PSYoungGen      total 18432K, used 2299K [0x00000007bec00000, 0x00000007c0000000, 0x00000007c0000000)
  eden space 16384K, 14% used [0x00000007bec00000,0x00000007bee3ee60,0x00000007bfc00000)
  from space 2048K, 0% used [0x00000007bfe00000,0x00000007bfe00000,0x00000007c0000000)
  to   space 2048K, 0% used [0x00000007bfc00000,0x00000007bfc00000,0x00000007bfe00000)
 ParOldGen       total 40960K, used 20480K [0x00000007bc400000, 0x00000007bec00000, 0x00000007bec00000)
  object space 40960K, 50% used [0x00000007bc400000,0x00000007bd800010,0x00000007bec00000)
 Metaspace       used 3133K, capacity 4496K, committed 4864K, reserved 1056768K
  class space    used 345K, capacity 388K, committed 512K, reserved 1048576K
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_8-为对象分配内存-tlb" tabindex="-1"><a class="header-anchor" href="#_8-为对象分配内存-tlb" aria-hidden="true">#</a> 8 为对象分配内存：TLB</h2><h2 id="_9-小结堆空间的参数设置" tabindex="-1"><a class="header-anchor" href="#_9-小结堆空间的参数设置" aria-hidden="true">#</a> 9 小结堆空间的参数设置</h2><ul><li>-Xms60m -Xmx60m -XX:NewRatio=2 -XX:+PrintGCDetails -XX:SurvivorRatio=8</li><li>-XX:+PrintFlagsInitial 查看所有参数默认初始值</li><li>-XX:+PrintFlagsFinal 查看所有参数最终值</li><li>-XX:+PrintGC 简化版GC信息</li></ul><h2 id="x-堆是分配对象的唯一选择吗" tabindex="-1"><a class="header-anchor" href="#x-堆是分配对象的唯一选择吗" aria-hidden="true">#</a> X 堆是分配对象的唯一选择吗？</h2><ul><li><p>逃逸分析</p><ul><li>jdk1.7后特性</li><li>-XX:-DoEscapeAnalysis (-关闭 + 开启)</li><li>一个对象没有逃逸出方法的话，可能被优化成栈上分配</li></ul></li><li><p>TaoBaoVM: GCIH(GC invisible heap)</p><ul><li>生命周期较长的Java对象，移至堆外</li><li>gc不管理GCIH内部对象</li></ul></li><li><p>结论：</p><ul><li>能使用局部变量的，就不要在方法定义</li></ul></li><li><p>优化</p><ul><li><p>栈上分配</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">nohi<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span></span>_08_heap<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>thinkinjava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
 *
 * <span class="token keyword">@author</span> NOHI
 * <span class="token keyword">@description</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>演示逃逸分析、栈上分配<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 * <span class="token keyword">@date</span> 2022/11/12 23:05
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackAllocation</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 演示逃逸分析、栈上分配
     * 1. 分配足够大内存，不开启逃逸分析： 不产生GC，查看内存使用
     *    -Xms1G -Xmx1G -XX:-DoEscapeAnalysis -XX:NewRatio=2 -XX:+PrintGCDetails -XX:SurvivorRatio=8
     * 2. 分配足够大内存，开启逃逸分析： 不产生GC，查看内存使用
     *   -Xms1-Xms100m -Xmx100m -XX:+DoEscapeAnalysis -XX:NewRatio=2 -XX:+PrintGCDetails -XX:SurvivorRatio=8G -Xmx1G -XX:+DoEscapeAnalysis -XX:NewRatio=2 -XX:+PrintGCDetails -XX:SurvivorRatio=8
     * 3. 分配100m内存，不使用逃逸分析，产品GC
     *    -Xms100m -Xmx100m -XX:-DoEscapeAnalysis -XX:NewRatio=2 -XX:+PrintGCDetails -XX:SurvivorRatio=8
     * 4. 分配100内存，开启逃逸分析，不产生GC
     * <span class="token keyword">@param</span> <span class="token parameter">args</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">StackAllocation</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StackAllocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            s<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;耗时:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Test</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>同步分配</p><ul><li><p>如果一个对象被发现只能从一个线程被访问到，那么对这个对象的操作可以不考虑同步</p></li><li><p>同步代价高，降低并发性和性能</p></li><li><p>优化：同步省略/锁消除</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">Object</span> hollis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>hollis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">Object</span> hollis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//synchronized (hollis) {</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment">//}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>标题替换</p><ul><li>标量：无法再分解成更小的数据的数据。</li><li>正对而言的为聚合量，可以再分解</li><li>-XX:+EliminateAllocations （默认打开）</li></ul></li></ul></li></ul>`,25),p=[t];function c(o,u){return s(),a("div",null,p)}const r=n(l,[["render",c],["__file","08_堆.html.vue"]]);export{r as default};
