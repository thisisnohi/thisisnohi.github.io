import{_ as t,p as l,q as e,a1 as i}from"./framework-449724a9.js";const d={},a=i('<h1 id="名词解释" tabindex="-1"><a class="header-anchor" href="#名词解释" aria-hidden="true">#</a> 名词解释</h1><ul><li><p>SOA: 面积服务的架构</p></li><li><p>CAP: Consistency 一致性 Availability 可用性 Partition tolerance 分区容错性</p></li><li><p>metrics: 指标</p></li><li><p>SSE: 服务端推送（Server Send Event）</p></li><li><p>ppi、dpi</p></li></ul><p>ppi (pixels per inch)：图像分辨率 （在图像中，每英寸所包含的像素数目）</p><p>dpi (dots per inch)： 打印分辨率 （每英寸所能打印的点数，即打印精度）</p><table><thead><tr><th style="text-align:left;">密度类型</th><th style="text-align:left;">代表的分辨率（px）</th><th style="text-align:left;">屏幕密度（dpi）</th><th style="text-align:left;">换算（px/dp）</th><th style="text-align:left;">比例</th></tr></thead><tbody><tr><td style="text-align:left;">低密度（ldpi）</td><td style="text-align:left;">240x320</td><td style="text-align:left;">120</td><td style="text-align:left;">1dp=0.75px</td><td style="text-align:left;">3</td></tr><tr><td style="text-align:left;">中密度（mdpi）</td><td style="text-align:left;">320x480</td><td style="text-align:left;">160</td><td style="text-align:left;">1dp=1px</td><td style="text-align:left;">4</td></tr><tr><td style="text-align:left;">高密度（hdpi）</td><td style="text-align:left;">480x800</td><td style="text-align:left;">240</td><td style="text-align:left;">1dp=1.5px</td><td style="text-align:left;">6</td></tr><tr><td style="text-align:left;">超高密度（xhdpi）</td><td style="text-align:left;">720x1280</td><td style="text-align:left;">320</td><td style="text-align:left;">1dp=2px</td><td style="text-align:left;">8</td></tr><tr><td style="text-align:left;">超超高密度（xxhdpi）</td><td style="text-align:left;">1080x1920</td><td style="text-align:left;">480</td><td style="text-align:left;">1dp=3px</td><td style="text-align:left;">12</td></tr></tbody></table><ul><li>缓存穿透 <ul><li>请求不存在的数据</li><li>恶意请求</li><li><code>解决</code>： <ul><li>缓存占位符</li><li>短缓存，比如一分种</li></ul></li></ul></li><li>缓存击穿 <ul><li>缓存过期后，大量同一请求访问</li><li><code>解决</code>： <ul><li>唯一DB请求，共享结果</li><li>分布式锁</li></ul></li></ul></li><li>缓存雪崩 <ul><li>相同的缓存时间</li><li>缓存同时过期</li><li>大量请求直接访问DB</li><li><code>解决方法</code>： <ul><li>缓存过期时间加上随机偏差</li><li>分布式缓存，防止单节点故障</li></ul></li></ul></li></ul>',6),n=[a];function s(x,p){return l(),e("div",null,n)}const r=t(d,[["render",s],["__file","name.html.vue"]]);export{r as default};
