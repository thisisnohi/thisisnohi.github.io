import{_ as n,p as s,q as a,a1 as t}from"./framework-449724a9.js";const p={},e=t(`<h1 id="_11-string" tabindex="-1"><a class="header-anchor" href="#_11-string" aria-hidden="true">#</a> 11 String</h1><h2 id="_1-string的基本特性" tabindex="-1"><a class="header-anchor" href="#_1-string的基本特性" aria-hidden="true">#</a> 1. String的基本特性</h2><ul><li>字符串： String s1 = &quot;&quot;; new String(&quot;&quot;); <ul><li>&quot;abc&quot; // 字面量定义方式，“abc”存储在字符串常量池中</li></ul></li><li>String声明为final的，不可被继承</li><li>实现了Serializable支持序列化，实现Comparable接口可比较大小</li><li>jdk1.8及之前，存储为char[]，jdk9及之后改为byte[] <ul><li>大部分存储是latin文件，只需要一半存储</li><li>改防byte数组：IOS-8859-1/latin一个字节存储，其他两个字节</li></ul></li><li>不可变字符序列，不可变性</li><li>字符串常量池中是不会存储相同内容的字符串</li><li>字符串常量池链表大小： -XX:StringTableSize=1009 <ul><li>jdk6之前是1009</li><li>jdk7默认60013</li><li>jkd8,1009最小值</li></ul></li></ul><h2 id="_2-string的内存分配" tabindex="-1"><a class="header-anchor" href="#_2-string的内存分配" aria-hidden="true">#</a> 2 String的内存分配</h2><ul><li>常量池 <ul><li>String s = &quot;aaaa&quot;</li><li>String.intern()方法</li><li>jdk1.6 在永久代中分配</li><li>jdk1.7及之后 在堆中</li></ul></li></ul><h2 id="_3-string的基本操作" tabindex="-1"><a class="header-anchor" href="#_3-string的基本操作" aria-hidden="true">#</a> 3 String的基本操作</h2><h2 id="_4-字符串拼接操作" tabindex="-1"><a class="header-anchor" href="#_4-字符串拼接操作" aria-hidden="true">#</a> 4 字符串拼接操作</h2><ul><li><p>常量拼接在常量池中</p></li><li><p>只要有一个是变量则在堆中</p></li><li><p>String.intern()判断字符串在不在常量池中中，不在创建，在直接返回地址</p></li><li><p>DEMO</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> s01 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s02 <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1:s1.equals(2):&quot;</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2:s1 == s2:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;3:s1 == s2(String.intern()):&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        s2 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;4:s1 == s2(\\&quot;Hello\\&quot; + \\&quot;World\\&quot;):&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        s2 <span class="token operator">=</span> s01 <span class="token operator">+</span> s02<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;5:s1 == s2(s2 = s01 + s02):&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token keyword">final</span> <span class="token class-name">String</span> s21 <span class="token operator">=</span> s01<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> s22 <span class="token operator">=</span> s02<span class="token punctuation">;</span>
        <span class="token class-name">String</span> s23 <span class="token operator">=</span> s21 <span class="token operator">+</span> s22<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;6:s1 == s2(s2 = final s01 + final s02):&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s23<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> s31 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> s32 <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>
        s23 <span class="token operator">=</span> s31 <span class="token operator">+</span> s32<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;7:s1 == s2(s2 = final s01 + final s02):&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s23<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span><span class="token operator">:</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token number">2</span><span class="token operator">:</span>s1 <span class="token operator">==</span> s2<span class="token operator">:</span><span class="token boolean">false</span>
<span class="token number">3</span><span class="token operator">:</span>s1 <span class="token operator">==</span> <span class="token function">s2</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token number">4</span><span class="token operator">:</span>s1 <span class="token operator">==</span> <span class="token function">s2</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token number">5</span><span class="token operator">:</span>s1 <span class="token operator">==</span> <span class="token function">s2</span><span class="token punctuation">(</span>s2 <span class="token operator">=</span> s01 <span class="token operator">+</span> s02<span class="token punctuation">)</span><span class="token operator">:</span><span class="token boolean">false</span>
<span class="token number">6</span><span class="token operator">:</span>s1 <span class="token operator">==</span> <span class="token function">s2</span><span class="token punctuation">(</span>s2 <span class="token operator">=</span> <span class="token keyword">final</span> s01 <span class="token operator">+</span> <span class="token keyword">final</span> s02<span class="token punctuation">)</span><span class="token operator">:</span><span class="token boolean">false</span>
<span class="token number">7</span><span class="token operator">:</span>s1 <span class="token operator">==</span> <span class="token function">s2</span><span class="token punctuation">(</span>s2 <span class="token operator">=</span> <span class="token keyword">final</span> s01 <span class="token operator">+</span> <span class="token keyword">final</span> s02<span class="token punctuation">)</span><span class="token operator">:</span><span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>问题</p><ul><li><p>String a = new String(&quot;a&quot;) 有几个对象，如何证明？</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2两个：一个是new关键字在堆空间创建的对象，另一个是字符串常量池中对象“a”
查看字节码 &quot;a&quot;为ldc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>new String(&quot;a&quot;) + new String(&quot;b&quot;) 创建几个对象</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
1. StringBuilder
2. new String(&quot;a&quot;)的new
3. 常量池中的&quot;a&quot;
4. new String(&quot;b&quot;)的new
5. 常量池中的“b”

StringBuilder的toString():
  对象6：new String(&quot;ab&quot;)

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_5-intern" tabindex="-1"><a class="header-anchor" href="#_5-intern" aria-hidden="true">#</a> 5 intern()</h2><ul><li><p>代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 保证堆中只有一份相同值： if only if</span>
        <span class="token comment">// intern()方法：查找常量池中是否存在&quot;ab&quot;,如果不存在，则常量池中分配索引指向堆中已有对象“ab”地址</span>
        <span class="token comment">// 如果存在，则返回常量池中地址</span>
        a<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a==b ? &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInter2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a==b ? &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jdk6 false  jdk7及以后 true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c==b ? &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_6-intern-空间占用" tabindex="-1"><a class="header-anchor" href="#_6-intern-空间占用" aria-hidden="true">#</a> 6 intern()空间占用</h2><ul><li><p>程序中存在大量重复字符串，使用intern()方法，可以减少大量空间。</p></li><li><p>StringTable 垃圾回收</p></li><li><p>-XX:+PrintStringTableStatistics</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* 增加参数设置
*   -Xmn10m -Xmx10m -XX:+PrintStringTableStatistics -XX:+PrintGC
* <span class="token keyword">@param</span> <span class="token parameter">args</span>
*/</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Allocation</span> <span class="token class-name">Failure</span><span class="token punctuation">)</span>  <span class="token number">7680</span>K<span class="token operator">-&gt;</span><span class="token function">616K</span><span class="token punctuation">(</span><span class="token number">9216</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0035358</span> secs<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Allocation</span> <span class="token class-name">Failure</span><span class="token punctuation">)</span>  <span class="token number">8296</span>K<span class="token operator">-&gt;</span><span class="token function">664K</span><span class="token punctuation">(</span><span class="token number">9216</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0026172</span> secs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token class-name">Full</span> <span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Ergonomics</span><span class="token punctuation">)</span>  <span class="token number">493</span>K<span class="token operator">-&gt;</span><span class="token function">420K</span><span class="token punctuation">(</span><span class="token number">9216</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0044161</span> secs<span class="token punctuation">]</span>
<span class="token class-name">SymbolTable</span> statistics<span class="token operator">:</span>
<span class="token class-name">Number</span> of buckets       <span class="token operator">:</span>     <span class="token number">20011</span> <span class="token operator">=</span>    <span class="token number">160088</span> bytes<span class="token punctuation">,</span> avg   <span class="token number">8.000</span>
<span class="token class-name">Number</span> of entries       <span class="token operator">:</span>     <span class="token number">12211</span> <span class="token operator">=</span>    <span class="token number">293064</span> bytes<span class="token punctuation">,</span> avg  <span class="token number">24.000</span>
<span class="token class-name">Number</span> of literals      <span class="token operator">:</span>     <span class="token number">12211</span> <span class="token operator">=</span>    <span class="token number">469920</span> bytes<span class="token punctuation">,</span> avg  <span class="token number">38.483</span>
<span class="token class-name">Total</span> footprint         <span class="token operator">:</span>           <span class="token operator">=</span>    <span class="token number">923072</span> bytes
<span class="token class-name">Average</span> bucket size     <span class="token operator">:</span>     <span class="token number">0.610</span>
<span class="token class-name">Variance</span> of bucket size <span class="token operator">:</span>     <span class="token number">0.611</span>
<span class="token class-name">Std</span><span class="token punctuation">.</span> dev<span class="token punctuation">.</span> of bucket size<span class="token operator">:</span>     <span class="token number">0.781</span>
<span class="token class-name">Maximum</span> bucket size     <span class="token operator">:</span>         <span class="token number">6</span>
<span class="token class-name">StringTable</span> statistics<span class="token operator">:</span>
<span class="token class-name">Number</span> of buckets       <span class="token operator">:</span>     <span class="token number">60013</span> <span class="token operator">=</span>    <span class="token number">480104</span> bytes<span class="token punctuation">,</span> avg   <span class="token number">8.000</span>
<span class="token class-name">Number</span> of entries       <span class="token operator">:</span>     <span class="token number">51383</span> <span class="token operator">=</span>   <span class="token number">1233192</span> bytes<span class="token punctuation">,</span> avg  <span class="token number">24.000</span>
<span class="token class-name">Number</span> of literals      <span class="token operator">:</span>     <span class="token number">51383</span> <span class="token operator">=</span>   <span class="token number">2887624</span> bytes<span class="token punctuation">,</span> avg  <span class="token number">56.198</span>
<span class="token class-name">Total</span> footprint         <span class="token operator">:</span>           <span class="token operator">=</span>   <span class="token number">4600920</span> bytes
<span class="token class-name">Average</span> bucket size     <span class="token operator">:</span>     <span class="token number">0.856</span>
<span class="token class-name">Variance</span> of bucket size <span class="token operator">:</span>     <span class="token number">0.669</span>
<span class="token class-name">Std</span><span class="token punctuation">.</span> dev<span class="token punctuation">.</span> of bucket size<span class="token operator">:</span>     <span class="token number">0.818</span>
<span class="token class-name">Maximum</span> bucket size     <span class="token operator">:</span>         <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_7-string-垃圾回收" tabindex="-1"><a class="header-anchor" href="#_7-string-垃圾回收" aria-hidden="true">#</a> 7 String 垃圾回收</h2></li></ul>`,8),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","11_Sting.html.vue"]]);export{r as default};
