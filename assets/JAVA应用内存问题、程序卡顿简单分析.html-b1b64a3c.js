import{_ as i,p as e,q as a,a1 as l}from"./framework-449724a9.js";const n={},d=l(`<h1 id="java应用-内存问题、程序卡顿简单分析" tabindex="-1"><a class="header-anchor" href="#java应用-内存问题、程序卡顿简单分析" aria-hidden="true">#</a> JAVA应用,内存问题、程序卡顿简单分析</h1><ul><li>要求： <ul><li>Linux运行环境、JDK1.8</li><li>Eclipe MAT (Memory Analyzer)</li></ul></li><li>主题 <ul><li>服务线程堆栈查看</li><li>OOM分析</li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://127.0.0.1:8099/demo/loop?loopSec=1
http://127.0.0.1:8099/demo/lock?lockSec=10
http://127.0.0.1:8099/demo/oom?objNum=6000000
http://127.0.0.1:8099/demo/oss?loopNum=1000

http://127.0.0.1:8099/demo/loop2?loopSec=10 运行10次，每次间隔10s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="服务线程堆栈查看" tabindex="-1"><a class="header-anchor" href="#服务线程堆栈查看" aria-hidden="true">#</a> 服务线程堆栈查看</h2><p>​ 列举说明查看线程堆栈常用方法、命令</p><h3 id="查看进程-获取pid" tabindex="-1"><a class="header-anchor" href="#查看进程-获取pid" aria-hidden="true">#</a> 查看进程 获取pid</h3><blockquote><p>两种方式： jps、 ps -ef | grep java/xxx.jar/进程名</p></blockquote><ul><li><p>jps:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt; jps -ml
18967 demo-web-1.0-SNAPSHOT.jar
19439 sun.tools.jps.Jps -ml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>ps -ef | grep java</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[nohi@nohi logs]$ ps -ef | grep java
nohi     18967  6475 18 14:01 pts/0    00:00:10 java -jar demo-web-1.0-SNAPSHOT.jar
nohi     23827 26256  0 14:02 pts/7    00:00:00 grep java
说明
UID        PID  PPID  C STIME TTY          TIME CMD

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>18967 23827 为pid</p><h3 id="查看有问题线程" tabindex="-1"><a class="header-anchor" href="#查看有问题线程" aria-hidden="true">#</a> 查看有问题线程</h3><p>根据进程，查看进程下线程，根据线程占用CPU、运行时间，获取有问题线程</p><ul><li>top -Hp pid</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>top -Hp pid 查看进程下线程信息

 PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                                                                          
20160 nohi      20   0 2976m 172m  13m R 90.6  4.5   1:13.48 java                                                                                                                                             
18976 nohi      20   0 2976m 172m  13m S  0.3  4.5   0:00.98 java                                                                                                                                             
18967 nohi      20   0 2976m 172m  13m S  0.0  4.5   0:00.00 java                                                                                                                                             
18968 nohi      20   0 2976m 172m  13m S  0.0  4.5   0:04.86 java                                                                                                                                             
18969 nohi      20   0 2976m 172m  13m S  0.0  4.5   0:00.51 java                                                                                                                                             
18970 nohi      20   0 2976m 172m  13m S  0.0  4.5   0:00.00 java                                                                                                                                             
18971 nohi      20   0 2976m 172m  13m S  0.0  4.5   0:00.00 java                                                                                                                                             
18972 nohi      20   0 2976m 172m  13m S  0.0  4.5   0:00.00 java    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><ul><li><p>arthas： thread</p><p>![image-20200721154745020](/Users/nohi/Library/Application Support/typora-user-images/image-20200721154745020.png)</p></li></ul><h3 id="打印堆栈" tabindex="-1"><a class="header-anchor" href="#打印堆栈" aria-hidden="true">#</a> 打印堆栈</h3><ul><li>jstack -l pid 导出线程栈</li><li>kill -3 pid</li></ul><p>注：</p><pre><code> 需要进程以nohup 方式启动，kill -3 后会在jar所生成的nohup.out文件中（一般在jar同目录）
</code></pre><h3 id="查看堆栈信息" tabindex="-1"><a class="header-anchor" href="#查看堆栈信息" aria-hidden="true">#</a> 查看堆栈信息</h3><ol><li>printf &#39;%x\\n&#39; 线程ID $&gt; printf &#39;%x\\n&#39; 20168 4ec8</li><li>线程栈信息中查询线程id （4ec8）</li></ol><p>![image-20200721155624560](/Users/nohi/Library/Application Support/typora-user-images/image-20200721155624560.png)</p><p>​</p><ul><li><p>Arthas: thread 22</p><p>![image-20200721154940093](/Users/nohi/Library/Application Support/typora-user-images/image-20200721154940093.png)</p></li></ul><h3 id="查看、备份" tabindex="-1"><a class="header-anchor" href="#查看、备份" aria-hidden="true">#</a> 查看、备份</h3><ul><li><p>tail -n 10000 nohup.out &gt; 1.txt</p><p>nohup.out 最后1w行数据存储到1.txt文件中备份</p></li></ul><p>问题定位：</p><p>​ 查看nohup.out/1.txt文件，从尾部向上查看</p><p>​ 一般如果是代码逻辑问题，卡某个方法，会找到方法执行的堆栈（业务逻辑代码），即可定位问题</p><h2 id="oom分析" tabindex="-1"><a class="header-anchor" href="#oom分析" aria-hidden="true">#</a> OOM分析</h2><ul><li><p>生成dump文件</p><ul><li>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/nohi/demo 应用启动后出现内存异常则会自动导出dump文件，默认的文件名是：java_pid&lt;进程号&gt;.hprof</li><li>jmap -dump:format=b,file=/home/nohi/demo/dump.dat pid</li><li>arthas: heapdump /home/nohi/demo/dump.hprof</li></ul></li><li><p>MAT 打开dump文件</p></li><li><p>导出dump文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1.查看内存状态
jmap -heap 进程ID
2.查看JVM堆中对象详情占用情况
jmap -histo 进程ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="其它" tabindex="-1"><a class="header-anchor" href="#其它" aria-hidden="true">#</a> 其它</h2><ul><li>工具：arthas <ul><li>参考：https://alibaba.github.io/arthas/</li><li>thread -b 查看线程死锁</li><li>sc 查看已加载的类 <ul><li>sc -d *DemoService</li></ul></li><li>sm 查看类的方法 <ul><li>sm demo.service.DemoService</li></ul></li><li>jad 反编译 <ul><li>jad demo.service.DemoService</li></ul></li><li>monitor 监控方法执行情况 <ul><li>monitor -c 10 demo.service.DemoService testLoopAndReturn -c 统计周期 默认120s</li></ul></li><li>watch 查看方法执行数据 <ul><li>watch demo.service.DemoService testLoopAndReturn &quot;{params,returnObj}&quot; -x 3 -x 深度</li></ul></li></ul></li></ul><h3 id="作业" tabindex="-1"><a class="header-anchor" href="#作业" aria-hidden="true">#</a> 作业</h3><ul><li>http://127.0.0.1:8099/demo/lock?lockSec=2000 <ul><li>线程堆栈 记录分析过程</li></ul></li><li>http://127.0.0.1:8099/demo/oom2?objNum=6000000 <ul><li>objNum多少出现oom</li><li>记录分析过程，找出问题代码、原因</li></ul></li></ul>`,35),r=[d];function s(t,o){return e(),a("div",null,r)}const p=i(n,[["render",s],["__file","JAVA应用内存问题、程序卡顿简单分析.html.vue"]]);export{p as default};
